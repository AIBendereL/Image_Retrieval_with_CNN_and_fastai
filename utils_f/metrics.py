# AUTOGENERATED! DO NOT EDIT! File to edit: ../metrics.ipynb.

# %% auto 0
__all__ = ['calculate_precision_at_k', 'get_precision_at_k', 'get_all_precision_at_k']

# %% ../metrics.ipynb 1
import torch

# %% ../metrics.ipynb 5
def calculate_precision_at_k(top_k, lbls_data, lbls_trgt):

    k = top_k.shape[1]
    num_trgt = len(top_k)
    
    lbls = [ [lbls_trgt[i], lbls_data[idxs]] for i, idxs in enumerate(top_k)]
    
    corrects = [(lbl_t == lbls_d).sum().item() for lbl_t, lbls_d in lbls]
    return sum(corrects) / (k * num_trgt)

def get_precision_at_k(k, idxs_li, lbls_data_li, lbls_trgt_li):

    top_k_li = [idxs[:, :k] for idxs in idxs_li]

    return [calculate_precision_at_k(top_k, lbls_data, lbls_trgt)
            for top_k, lbls_data, lbls_trgt in zip(top_k_li, lbls_data_li, lbls_trgt_li)]

def get_all_precision_at_k(k_li, idxs_li, lbls_data_li, lbls_trgt_li, transpose= True):

    precision_at_k_li = torch.tensor([get_precision_at_k(k, idxs_li, lbls_data_li, lbls_trgt_li) for k in k_li])
    
    if transpose: precision_at_k_li = precision_at_k_li.T  
    return precision_at_k_li
