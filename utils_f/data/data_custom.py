# AUTOGENERATED! DO NOT EDIT! File to edit: ../../data_custom.ipynb.

# %% auto 0
__all__ = ['batch_size', 'Food', 'Mnist', 'Cifar100', 'Cifar10', 'Imagenette320', 'Imagenette160', 'Imagewoof320', 'Imagewoof160',
           'Cub200_2011', 'Caltech101', 'Extract1000Fast']

# %% ../../data_custom.ipynb 1
import os
from pathlib import Path

from fastai.torch_core import set_seed

from fastai.data.block import DataBlock
from fastai.data.transforms import GrandparentSplitter, RandomSplitter, FuncSplitter
from fastai.data.external import untar_data, URLs

from fastai.vision.core import PILImage
from fastai.vision.data import ImageBlock, CategoryBlock, parent_label
from fastai.vision.utils import get_image_files, resize_images
from fastai.vision.augment import Resize, ResizeMethod, PadMode

from utils_f.label import get_label_cub2002011, return_annotation_map

import pandas as pd

# %% ../../data_custom.ipynb 3
batch_size = 64

# %% ../../data_custom.ipynb 7
os.environ["FASTAI_HOME"] = "Data/"

# %% ../../data_custom.ipynb 13
# images-number-decreasing,  
# classes-number-decreasing,
# image-size-decreasing order

class Food():

    # data: 75,750 (75)
    # trgt: 25,250 (25)
    # size: ~ 512
    # nclasses: 101

    def __init__(self):

        self.name = "food"
        self.path = untar_data(URLs.FOOD)

        self.itfms = Resize(224, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle= False
        self.bs = batch_size

        self.trgts = self.get_targets()
        splitter_func = lambda img_p: " ".join([img_p.parent.name, img_p.name.split(".")[0]]) in self.trgts

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= FuncSplitter(splitter_func),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)

    def get_targets(self):

        trgt_path = Path("Data\\data\\food-101\\test.txt")
        with open(trgt_path, "r") as trgt_file:
            strs = trgt_file.readlines()

        return [" ".join(str[:-1].split("/")) for str in strs]
        

class Mnist():

    # data: 60,000 (~85)
    # trgt: 10,000 (~15)
    # size: all 28x28
    # nclasses: 10

    def __init__(self):

        self.name = "mnist"
        self.path = untar_data(URLs.MNIST)

        self.itfms = Resize(32, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        name_data = "training"
        name_trgt = "testing"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Cifar100():

    # data: 50,000 (~80)
    # trgt: 10,000 (~20)
    # size: all 32x32
    # nclasses: 100

    def __init__(self):

        self.name = "cifar_100"
        self.path = untar_data(URLs.CIFAR_100)

        self.itfms = None

        self.shuffle = False
        self.bs = batch_size

        splitter_func = lambda img_p: img_p.parent.parent.parent.name == "test"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= FuncSplitter(splitter_func),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Cifar10():

    # data: 50,000 (~80)
    # trgt: 10,000 (~20)
    # size: all 32x32
    # nclasses: 10
    
    def __init__(self):

        self.name = "cifar_10"
        self.path = untar_data(URLs.CIFAR)

        self.itfms = None # original size: 32x32

        self.shuffle = False
        self.bs = batch_size

        name_data = "train"
        name_trgt = "test"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Imagenette320():

    # data: 9,469 (~70)
    # trgt: 3,925 (~30)
    # size: ~ 320
    # nclasses: 10

    def __init__(self):

        self.name = "imagenette_320"
        self.path = untar_data(URLs.IMAGENETTE_320)

        self.itfms = Resize(224, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        name_data = "train"
        name_trgt = "val"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Imagenette160():

    # data: 9,469 (~70)
    # trgt: 3,925 (~30)
    # size: ~ 160
    # nclasses: 10

    def __init__(self):

        self.name = "imagenette_160"
        self.path = untar_data(URLs.IMAGENETTE_160)

        self.itfms = Resize(160, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        name_data = "train"
        name_trgt = "val"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Imagewoof320():

    # data: 9,025 (~70)
    # trgt: 3,929 (~30)
    # size: ~ 320
    # nclasses: 10

    def __init__(self):

        self.name = "imagewoof_320"
        self.path = untar_data(URLs.IMAGEWOOF_320)

        self.itfms = Resize(224, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        name_data = "train"
        name_trgt = "val"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Imagewoof160():

    # data: 9,025 (~70)
    # trgt: 3,929 (~30)
    # size: ~ 160
    # nclasses: 10

    def __init__(self):

        self.name = "imagewoof_160"
        self.path = untar_data(URLs.IMAGEWOOF_160)

        self.itfms = Resize(160, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        name_data = "train"
        name_trgt = "val"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)

        
class Cub200_2011():

    # data: 8,252 (~70)
    # trgt: 3,536 (~30)
    # size: ~ 500
    # nclasses: 200

    def __init__(self):

        self.name = "cub_200_2011"
        self.path = untar_data(URLs.CUB_200_2011)

        self.itfms = Resize(224, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= get_label_cub2002011,
            splitter= RandomSplitter(valid_pct= 0.3, seed= 42),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)


class Caltech101():

    # data: 6,047 (70)
    # trgt: 2,603 (30)
    # size: ~ 300
    # nclasses: 101

    def __init__(self):

        self.name = "caltech_101"
        self.path = untar_data(URLs.CALTECH_101)

        self.itfms = Resize(224, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= parent_label,
            splitter= RandomSplitter(valid_pct= 0.3, seed= 42),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)
        

class Extract1000Fast():

    # data: 800 (80)
    # trgt: 200 (20)
    # size: ~ 500
    # nclasses: 100
    
    def __init__(self):

        self.name = "extract_1000_fast"
        self.path = Path("Data\ImageNet\extract_1000_fast")

        self.itfms = Resize(224, method= ResizeMethod.Pad, pad_mode= PadMode.Zeros)

        self.shuffle = False
        self.bs = batch_size

        self.anno_map = return_annotation_map()
        verbal_label = lambda img_p: self.anno_map[parent_label(img_p)]

        name_data = "data"
        name_trgt = "target"

        self.dtb = DataBlock(
            blocks= (ImageBlock, CategoryBlock),
            get_items= get_image_files,
            get_y= verbal_label,
            splitter= GrandparentSplitter(train_name= name_data, valid_name= name_trgt),
            item_tfms= self.itfms)

        self.dls = self.dtb.dataloaders(self.path, shuffle= self.shuffle, bs= self.bs)
