# AUTOGENERATED! DO NOT EDIT! File to edit: ../../model_custom.ipynb.

# %% auto 0
__all__ = ['ConvnextLarge', 'ConvnextSmall', 'Resnet152', 'Efficientnetv2RwT', 'EfficientnetB3', 'Resnet26d', 'Vgg16']

# %% ../../model_custom.ipynb 1
import os
import torch
from torch import nn
from pathlib import Path

import timm

# %% ../../model_custom.ipynb 3
os.environ["TORCH_HOME"] = "Model/"
os.environ["FASTAI_HOME"] = "Data/"

# %% ../../model_custom.ipynb 7
# accuracy-decreasing order

class ConvnextLarge(nn.Module):

    # accuracy: 87.026
    # fts shape: (B, 1536)
    
    def __init__(self, pretrained= True):

        super(ConvnextLarge, self).__init__()

        self.name = "convnext_large"
        model = timm.create_model(self.name, pretrained= pretrained)

        self.model = model

        self.model.head.drop = nn.Identity()
        self.model.head.fc = nn.Identity()

    def forward(self, x): return self.model(x)


class ConvnextSmall(nn.Module):

    # accuracy: 85.33
    # fts shape: (B, 768)

    def __init__(self, pretrained= True):

        super(ConvnextSmall, self).__init__()

        self.name = "convnext_small"
        model = timm.create_model("convnext_small", pretrained= pretrained)

        self.model = model

        self.model.head.drop = nn.Identity()
        self.model.head.fc = nn.Identity()

    def forward(self, x): return self.model(x)


class Resnet152(nn.Module):

    # accuracy: 82.732
    # fts shape: (B, 2048)

    def __init__(self, pretrained= True):

        super(Resnet152, self).__init__()

        self.name = "resnet152"
        model = timm.create_model(self.name, pretrained= pretrained)

        self.model = model

        self.model.fc = nn.Identity()

    def forward(self, x): return self.model(x)


class Efficientnetv2RwT(nn.Module):

    # accuracy: 82.35
    # fts shape: (B, 1024)

    def __init__(self, pretrained= True):

        super(Efficientnetv2RwT, self).__init__()

        self.name = "efficientnetv2_rw_t"
        model = timm.create_model(self.name, pretrained= pretrained)

        self.model = model

        self.model.classifier = nn.Identity()
        
    def forward(self, x): return self.model(x)


class EfficientnetB3(nn.Module):

    # accuracy: 82.242
    # fts shape: (B, 1536)

    def __init__(self, pretrained= True):

        super(EfficientnetB3, self).__init__()

        self.name = "efficientnet_b3"
        model = timm.create_model(self.name, pretrained= pretrained)

        self.model = model

        self.model.classifier = nn.Identity()

    def forward(self, x): return self.model(x)


class Resnet26d(nn.Module):

    # accuracy: 77.408
    # fts shape: (B, 2048)

    def __init__(self, pretrained= True):

        super(Resnet26d, self).__init__()

        self.name = "resnet26d"
        model = timm.create_model(self.name, pretrained= pretrained)
        
        self.model = model
        
        self.model.fc = nn.Identity()

    def forward(self, x): return self.model(x)


class Vgg16(nn.Module):

    # accuracy: 71.592
    # fts shape: (B, 4096)
    
    def __init__(self, pretrained= True):
        
        super(Vgg16, self).__init__()
        
        self.name = "vgg16"
        model = timm.create_model(self.name, pretrained= pretrained)

        self.model = model

        self.model.pre_logits.act2 = nn.Flatten()
        self.model.head = nn.Identity()

    def forward(self, x): return self.model(x)
