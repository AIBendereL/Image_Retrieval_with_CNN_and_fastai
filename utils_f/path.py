# AUTOGENERATED! DO NOT EDIT! File to edit: ../path.ipynb.

# %% auto 0
__all__ = ['get_feature_paths', 'get_learner_paths', 'get_label_paths']

# %% ../path.ipynb 1
from pathlib import Path

# %% ../path.ipynb 5
def get_feature_paths(dts_li, model_li):

    folder_path = Path("Feature/")
    dts_names = [dts.name for dts in dts_li]
    mdl_names = [mdl.name for mdl in model_li]

    paths = [folder_path/d for d in dts_names]
    [p.mkdir() for p in paths if not p.exists()]

    paths = [folder_path/d/m for d in dts_names for m in mdl_names]
    [p.mkdir() for p in paths if not p.exists()]

    fts_data_path_li = [folder_path/d/m/f"{d}_{m}_data_fts.pt" for d in dts_names for m in mdl_names]
    fts_trgt_path_li = [folder_path/d/m/f"{d}_{m}_target_fts.pt" for d in dts_names for m in mdl_names]

    return fts_data_path_li, fts_trgt_path_li

def get_learner_paths(dts_li, model_li):

    folder_path = Path("Learner/")
    dts_names = [dts.name for dts in dts_li]
    mdl_names = [mdl.name for mdl in model_li]

    paths = [folder_path/d for d in dts_names]
    [p.mkdir() for p in paths if not p.exists()]

    paths = [folder_path/d/m for d in dts_names for m in mdl_names]
    [p.mkdir() for p in paths if not p.exists()]

    return [folder_path/d/m/f"{d}_{m}_learner.pkl" for d in dts_names for m in mdl_names]

def get_label_paths(dts_li, model_li):

    folder_path = Path("Label/")
    dts_names = [dts.name for dts in dts_li]
    mdl_names = [mdl.name for mdl in model_li]

    paths = [folder_path/d for d in dts_names]
    [p.mkdir() for p in paths if not p.exists()]

    paths = [folder_path/d/m for d in dts_names for m in mdl_names]
    [p.mkdir() for p in paths if not p.exists()]

    lbls_data_path_li = [folder_path/d/m/f"{d}_{m}_data_labels.pt" for d in dts_names for m in mdl_names]
    lbls_trgt_path_li = [folder_path/d/m/f"{d}_{m}_target_labels.pt" for d in dts_names for m in mdl_names]

    return lbls_data_path_li, lbls_trgt_path_li
